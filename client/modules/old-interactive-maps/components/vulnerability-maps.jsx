import React from 'react';
import googleMaps from 'google-maps';
import {FlowRouter} from 'meteor/kadira:flow-router';

class VulnerabilityMapComponent extends React.Component {
  constructor() {
    super();
    this.auto = this.auto.bind(this);
    this.google = null;
    this.map = null;
    this.mapContainer = null;
    this.layer = [];
  }
  auto() {
    let myWidth = 0;
    let myHeight = 0;
    if( typeof( window.innerWidth ) == 'number' ) {
      //Non-IE
      myWidth = window.innerWidth;
      myHeight = window.innerHeight;
    } else if( document.documentElement && ( document.documentElement.clientWidth || document.documentElement.clientHeight ) ) {
      //IE 6+ in 'standards compliant mode'
      myWidth = document.documentElement.clientWidth;
      myHeight = document.documentElement.clientHeight;
    } else if( document.body && ( document.body.clientWidth || document.body.clientHeight ) ) {
      //IE 4 compatible
      myWidth = document.body.clientWidth;
      myHeight = document.body.clientHeight;
    }
    console.log(this.mapContainer.style)
    this.mapContainer.style.height = (myHeight-60)+'px';
    this.mapControls.style.height = (myHeight-200)+'px';
  }
  componentDidMount() {
    if (componentHandler) {
      componentHandler.upgradeDom();
    }
    const auto = this.auto;
    window.addEventListener('resize', () => {
      auto();
    });
    this.auto();

    const {lat, lng, zoom, vulnerability, type} = this.props;
    googleMaps.load((google) => {
      if (google) {
        this.google = google;
        this.map = new this.google.maps.Map(this.mapContainer, {
          zoom,
          center: {lat, lng}
        });

        this.map.controls[google.maps.ControlPosition.LEFT_TOP].push(this.mapControls);
        this.map.controls[google.maps.ControlPosition.RIGHT_TOP].push(this.namer);

        for (let i = 0; i < vulnerability.length; i++) {
          let vObj = vulnerability[i];
          let bounds = {
            north: vObj.bounds.upperRight[0],
            south: vObj.bounds.lowerLeft[0],
            east: vObj.bounds.upperRight[1],
            west: vObj.bounds.lowerLeft[1]
          };
          let layer = new this.google.maps.GroundOverlay(
            vObj.path,
            bounds,
            {
              opacity: 0.7
            }
          );
          this.layer.push({
            layer,
            type: vObj.type
          });
        }

        for (let k = 0; k < this.layer.length; k++) {
          if (this.layer[k].type === type) {
            this.layer[k].layer.setMap(this.map);
          } else {
            this.layer[k].layer.setMap(null);
          }
        }
      } else {
        // handle error
      }
    });
  }
  componentDidUpdate() {
    if (componentHandler) {
      componentHandler.upgradeDom();
    }
    const {type} = this.props;
    let l = 0;
    for (let k = 0; k < this.layer.length; k++) {
      if (this.layer[k].type === type) {
        l = k;
      } else {
        this.layer[k].layer.setMap(null);
      }
    }
    const self = this;
    setTimeout(() => {
      self.layer[l].layer.setMap(self.map);
    }, 500);
  }
  renderText(type) {
    return (FlowRouter.getParam('type') === type) ?
      (<strong><u>{`${type} Map`}</u></strong>) :
      `${type} Map`;
  }
  renderLinks() {
    const {vulnerability} = this.props;
    return vulnerability.map((type, key) => {
      const style = {
        textDecoration: 'none',
        color: "#33691e"
      };
      return (
        <div className='mdl-cell mdl-cell--12-col'>
          <a
            href={`/vulnerability-maps/${type.type}`}
            style = {style}
          >
            {this.renderText(type.type)}
          </a>
        </div>
      );
    });
  }
  render() {
    const {width, height, type} = this.props;
    const style = {
      width,
      height
    };
    const styleControls = {
      position: 'absolute',
      width: '30%',
      maxWidth: 200,
      minWidth: 150,
      backgroundColor: '#FFFFFF',
      padding: 15,
      marginTop: 10,
      marginLeft: 10,
      overflow: 'auto'
    };
    const styleName = {
      position: 'absolute',
      backgroundColor: '#FFFFFF',
      margin: 10
    };
    const map = (c) => {
      this.mapContainer = c;
    };
    const controls = (c) => {
      this.mapControls = c;
    };
    const name = (c) => {
      this.namer = c;
    };
    return (
      <div className="mdl-grid mdl-grid--no-spacing">
        <div className="mdl-cell mdl-cell--12-col old-suitability-map">
          <div
            className="mdl-grid"
            style = {styleControls}
            ref={controls}
          >
            <div className="mdl-cell mdl-cell--12-col">
              <div
                className="mdl-grid mdl-grid--no-spacing"
              >
                <div className="mdl-cell mdl-cell--12-col">
                  {'Click to see Vulnerability Map'}
                </div>
                {this.renderLinks()}
                <div className="mdl-cell mdl-cell--12-col">
                  &nbsp;
                </div>
                <div className="mdl-cell mdl-cell--12-col">
                  &nbsp;
                </div>
              </div>
            </div>
          </div>

          <div
            className="mdl-grid"
            ref={name}
            style={styleName}
          >
            <div className="mdl-cell mdl-cell--12-col">
              {`${type} Map`}
            </div>
          </div>
          <div
            ref={map}
            style={style}
          >
          </div>
        </div>
      </div>
    );
  }
}

VulnerabilityMapComponent.propType = {
  type: React.PropTypes.string,
  height: React.PropTypes.oneOfType([
    React.PropTypes.string,
    React.PropTypes.number
  ]),
  vulnerability: React.PropTypes.arrayOf(React.PropTypes.object),
  lat: React.PropTypes.number,
  lng: React.PropTypes.number,
  width: React.PropTypes.oneOfType([
    React.PropTypes.string,
    React.PropTypes.number
  ]),
  zoom: React.PropTypes.number
};

VulnerabilityMapComponent.defaultProps = {
  type: 'NDVI',
  height: 400,
  lat: 12.2969397,
  lng: 121.6576634,
  vulnerability: [
    {
      type: 'NDVI',
      path: '/NDVI_big_converted.png',
      bounds: {
        "upperRight": [20.107331,127.501833],
        "lowerLeft": [9.881192,111.503475]
      }
    },
    {
      type: 'Temperature',
      path: '/Temperature.png',
      bounds: {
        "upperRight": [20.107314,127.502444],
        "lowerLeft": [9.880758,111.503489]
      }
    },
    {
      type: 'Rainfall',
      path: '/Rainfall.png',
      bounds: {
        "upperRight": [21.070139,126.60535],
        "lowerLeft": [4.586939,116.928339]
      }
    }
  ],
  width: '100%',
  zoom: 6
};

export default VulnerabilityMapComponent;
